{
	"info": {
		"_postman_id": "a51b8d5b-57ae-49e5-813d-e93b8f76f71d",
		"name": "M2 SG WebCheckout",
		"description": "M2 - guest or customer API calls\n\nM2A - admin API calls\n\nFE - frontend page calls (e.g. cart page)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4465207",
		"_collection_link": "https://orange-comet-319647.postman.co/workspace/My-Workspace~8393489d-3b51-4024-88fd-4a6d5490441c/collection/4465207-a51b8d5b-57ae-49e5-813d-e93b8f76f71d?action=share&source=collection_link&creator=4465207"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "M2: admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is a string\", function () {",
									"    const token = pm.response.text().replace(/['\"]+/g, '');",
									"    pm.expect(token).to.be.a('string').to.not.be.empty;",
									"    pm.environment.set('gen_adminToken', token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{m2_admin}}\",\n  \"password\": \"{{m2_pass}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_api}}/integration/admin/token",
							"host": [
								"{{m2_endpoint_api}}"
							],
							"path": [
								"integration",
								"admin",
								"token"
							]
						},
						"description": "Create access token for admin given the customer credentials."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "<string>"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "WebC only rule",
			"item": [
				{
					"name": "M2A: create SG App rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Save ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.rule_id).to.be.a('number');",
									"    pm.environment.set('gen_rule_sgApp_id', jsonData.rule_id)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rule\": {\n        \"is_active\": 1,\n        \"is_advanced\": 1,\n        \"name\": \"SG API Rule Test\",\n        \"apply_to_shipping\": 0,\n        \"coupon_type\": 1,\n        \"simple_action\": \"cart_fixed\",\n        \"from_date\": \"2025-03-27\",\n        \"customer_group_ids\": [\n            0,\n            1\n        ],\n        \"is_rss\": 1,\n        \"discount_amount\": 5.45,\n        \"discount_step\": 0,\n        \"website_ids\": [\n            1\n        ],\n        \"times_used\": 0,\n        \"use_auto_generation\": 0,\n        \"uses_per_coupon\": 0,\n        \"uses_per_customer\": 0,\n        \"sort_order\": 0,\n        \"stop_rules_processing\": 1,\n        \"condition\": {\n            \"condition_type\": \"Magento\\\\SalesRule\\\\Model\\\\Rule\\\\Condition\\\\Combine\",\n            \"conditions\": [\n                {\n                    \"condition_type\": \"Shopgate\\\\WebCheckout\\\\Model\\\\Rule\\\\Condition\\\\WebCheckout\",\n                    \"operator\": \"==\",\n                    \"attribute_name\": \"is_webcheckout_order\",\n                    \"value\": \"1\"\n                }\n            ],\n            \"aggregator_type\": \"all\",\n            \"operator\": null,\n            \"value\": \"1\"\n        },\n        \"action_condition\": {\n            \"condition_type\": \"Magento\\\\SalesRule\\\\Model\\\\Rule\\\\Condition\\\\Product\\\\Combine\",\n            \"aggregator_type\": \"all\",\n            \"operator\": null,\n            \"value\": \"1\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_api}}/salesRules",
							"host": [
								"{{m2_endpoint_api}}"
							],
							"path": [
								"salesRules"
							],
							"query": [
								{
									"key": "searchCriteria[requestName]",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "searchCriteria[filterGroups][0][filters][0][field]",
									"value": "name",
									"description": "Field",
									"disabled": true
								},
								{
									"key": "searchCriteria[filterGroups][0][filters][0][value]",
									"value": "%Shopgate%",
									"description": "Value",
									"disabled": true
								},
								{
									"key": "searchCriteria[filterGroups][0][filters][0][conditionType]",
									"value": "like",
									"description": "Condition type",
									"disabled": true
								},
								{
									"key": "searchCriteria[sortOrders][0][field]",
									"value": "<string>",
									"description": "Sorting field.",
									"disabled": true
								},
								{
									"key": "searchCriteria[sortOrders][0][direction]",
									"value": "<string>",
									"description": "Sorting direction.",
									"disabled": true
								},
								{
									"key": "searchCriteria[pageSize]",
									"value": "<integer>",
									"description": "Page size.",
									"disabled": true
								},
								{
									"key": "searchCriteria[currentPage]",
									"value": "<integer>",
									"description": "Current page.",
									"disabled": true
								}
							]
						},
						"description": "Create access token for admin given the customer credentials."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "<string>"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "M2: create guest cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is a string\", function () {",
									"    const cartId = pm.response.text().replace(/['\"]+/g, '');",
									"    pm.expect(cartId).to.be.a('string');",
									"    pm.environment.set('gen_cartId', cartId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{m2_endpoint_api}}/guest-carts",
							"host": [
								"{{m2_endpoint_api}}"
							],
							"path": [
								"guest-carts"
							]
						},
						"description": "Enable an customer or guest user to create an empty cart and quote for an anonymous customer."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "<string>"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "M2: add prod 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Make sure product was added\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors, 'item was not added!').to.be.undefined",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Allow cookie deletion by going to cookies -> Domain Allowlist",
									"const jar = pm.cookies.jar();",
									"jar.unset(pm.environment.get(\"host\"), 'PHPSESSID', function (error) {",
									"    if (error) {",
									"        console.log(error.message)",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  addSimpleProductsToCart(\n    input: {\n      cart_id: \"{{gen_cartId}}\", \n      cart_items: [{\n        data: {\n          quantity: 1\n          sku: \"24-WG02\"\n        }\n      }]\n    }) {\n    cart {\n      id\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{domain}}/graphql",
							"host": [
								"{{domain}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Add/update the specified cart item."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cartItem\": {\n    \"qty\": \"<number>\",\n    \"quote_id\": \"<string>\",\n    \"item_id\": \"<integer>\",\n    \"sku\": \"<string>\",\n    \"name\": \"<string>\",\n    \"price\": \"<number>\",\n    \"product_type\": \"<string>\",\n    \"product_option\": {\n      \"extension_attributes\": {\n        \"custom_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          }\n        ],\n        \"bundle_options\": [\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          }\n        ],\n        \"downloadable_option\": {\n          \"downloadable_links\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"configurable_item_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ],\n        \"grouped_options\": [\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ]\n      }\n    },\n    \"extension_attributes\": {\n      \"discounts\": [\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        },\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts/:cartId/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"qty\": \"<number>\",\n  \"quote_id\": \"<string>\",\n  \"item_id\": \"<integer>\",\n  \"sku\": \"<string>\",\n  \"name\": \"<string>\",\n  \"price\": \"<number>\",\n  \"product_type\": \"<string>\",\n  \"product_option\": {\n    \"extension_attributes\": {\n      \"custom_options\": [\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<string>\",\n          \"extension_attributes\": {\n            \"file_info\": {\n              \"base64_encoded_data\": \"<string>\",\n              \"type\": \"<string>\",\n              \"name\": \"<string>\"\n            }\n          }\n        },\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<string>\",\n          \"extension_attributes\": {\n            \"file_info\": {\n              \"base64_encoded_data\": \"<string>\",\n              \"type\": \"<string>\",\n              \"name\": \"<string>\"\n            }\n          }\n        }\n      ],\n      \"bundle_options\": [\n        {\n          \"option_id\": \"<integer>\",\n          \"option_qty\": \"<integer>\",\n          \"option_selections\": [\n            \"<integer>\",\n            \"<integer>\"\n          ],\n          \"extension_attributes\": {}\n        },\n        {\n          \"option_id\": \"<integer>\",\n          \"option_qty\": \"<integer>\",\n          \"option_selections\": [\n            \"<integer>\",\n            \"<integer>\"\n          ],\n          \"extension_attributes\": {}\n        }\n      ],\n      \"downloadable_option\": {\n        \"downloadable_links\": [\n          \"<integer>\",\n          \"<integer>\"\n        ]\n      },\n      \"configurable_item_options\": [\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<integer>\",\n          \"extension_attributes\": {}\n        }\n      ],\n      \"grouped_options\": [\n        {\n          \"id\": \"<integer>\",\n          \"qty\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        {\n          \"id\": \"<integer>\",\n          \"qty\": \"<integer>\",\n          \"extension_attributes\": {}\n        }\n      ]\n    }\n  },\n  \"extension_attributes\": {\n    \"discounts\": [\n      {\n        \"discount_data\": {\n          \"amount\": \"<number>\",\n          \"base_amount\": \"<number>\",\n          \"original_amount\": \"<number>\",\n          \"base_original_amount\": \"<number>\"\n        },\n        \"rule_label\": \"<string>\",\n        \"rule_id\": \"<integer>\"\n      },\n      {\n        \"discount_data\": {\n          \"amount\": \"<number>\",\n          \"base_amount\": \"<number>\",\n          \"original_amount\": \"<number>\",\n          \"base_original_amount\": \"<number>\"\n        },\n        \"rule_label\": \"<string>\",\n        \"rule_id\": \"<integer>\"\n      }\n    ]\n  }\n}"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cartItem\": {\n    \"qty\": \"<number>\",\n    \"quote_id\": \"<string>\",\n    \"item_id\": \"<integer>\",\n    \"sku\": \"<string>\",\n    \"name\": \"<string>\",\n    \"price\": \"<number>\",\n    \"product_type\": \"<string>\",\n    \"product_option\": {\n      \"extension_attributes\": {\n        \"custom_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          }\n        ],\n        \"bundle_options\": [\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          }\n        ],\n        \"downloadable_option\": {\n          \"downloadable_links\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"configurable_item_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ],\n        \"grouped_options\": [\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ]\n      }\n    },\n    \"extension_attributes\": {\n      \"discounts\": [\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        },\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts/:cartId/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cartItem\": {\n    \"qty\": \"<number>\",\n    \"quote_id\": \"<string>\",\n    \"item_id\": \"<integer>\",\n    \"sku\": \"<string>\",\n    \"name\": \"<string>\",\n    \"price\": \"<number>\",\n    \"product_type\": \"<string>\",\n    \"product_option\": {\n      \"extension_attributes\": {\n        \"custom_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          }\n        ],\n        \"bundle_options\": [\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          }\n        ],\n        \"downloadable_option\": {\n          \"downloadable_links\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"configurable_item_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ],\n        \"grouped_options\": [\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ]\n      }\n    },\n    \"extension_attributes\": {\n      \"discounts\": [\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        },\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts/:cartId/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "GQL: getCart (no header)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check no rule applied\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.cart.prices.discounts).to.be.null;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  cart(cart_id: \"{{gen_cartId}}\") {\n        id,\n        email,\n        applied_coupons {\n            code\n        },\n        prices {\n            discounts {\n                amount {\n                    value,\n                    currency\n                },\n                label\n            }\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{host}}/graphql",
							"host": [
								"{{host}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GQL: getCart (/w header)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check no rule applied\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.cart.prices.discounts).to.be.a('array').to.not.be.empty;",
									"    const discount = jsonData.data.cart.prices.discounts.pop()",
									"    pm.expect(discount.amount.value).to.be.a('number')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "shopgate-check",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  cart(cart_id: \"{{gen_cartId}}\") {\n        id,\n        email,\n        applied_coupons {\n            code\n        },\n        prices {\n            discounts {\n                amount {\n                    value,\n                    currency\n                },\n                label\n            }\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{host}}/graphql",
							"host": [
								"{{host}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "M2A: delete rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rule\": {\n        \"is_active\": 1,\n        \"is_advanced\": 1,\n        \"name\": \"SG API Rule Test\",\n        \"apply_to_shipping\": 0,\n        \"coupon_type\": 1,\n        \"simple_action\": \"by_fixed\",\n        \"from_date\": \"2025-03-27\",\n        \"customer_group_ids\": [\n            0,\n            1\n        ],\n        \"is_rss\": 1,\n        \"discount_amount\": 5.45,\n        \"discount_step\": 0,\n        \"website_ids\": [\n            1\n        ],\n        \"times_used\": 0,\n        \"use_auto_generation\": 0,\n        \"uses_per_coupon\": 0,\n        \"uses_per_customer\": 0,\n        \"sort_order\": 0,\n        \"stop_rules_processing\": 0,\n        \"condition\": {\n            \"condition_type\": \"Magento\\\\SalesRule\\\\Model\\\\Rule\\\\Condition\\\\Combine\",\n            \"conditions\": [\n                {\n                    \"condition_type\": \"Shopgate\\\\WebCheckout\\\\Model\\\\Rule\\\\Condition\\\\WebCheckout\",\n                    \"operator\": \"==\",\n                    \"attribute_name\": \"is_webcheckout_order\",\n                    \"value\": \"1\"\n                }\n            ],\n            \"aggregator_type\": \"all\",\n            \"operator\": null,\n            \"value\": \"1\"\n        },\n        \"action_condition\": {\n            \"condition_type\": \"Magento\\\\SalesRule\\\\Model\\\\Rule\\\\Condition\\\\Product\\\\Combine\",\n            \"aggregator_type\": \"all\",\n            \"operator\": null,\n            \"value\": \"1\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_api}}/salesRules/:ruleId",
							"host": [
								"{{m2_endpoint_api}}"
							],
							"path": [
								"salesRules",
								":ruleId"
							],
							"variable": [
								{
									"key": "ruleId",
									"value": "{{gen_rule_sgApp_id}}"
								}
							]
						},
						"description": "Create access token for admin given the customer credentials."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "<string>"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				}
			],
			"description": "Checks if our SG inApp rule discount is applied when necessary"
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "FPC",
					"item": [
						{
							"name": "Auto-logout",
							"item": [
								{
									"name": "M2: create customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Save ID\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.be.a('number');",
													"    pm.environment.set(\"gen_customer_1_id\", jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"{{created_customer_1_pass}}\",\n    \"customer\": {\n        \"email\": \"{{created_customer_1_email}}\",\n        \"group_id\": 1,\n        \"default_billing\": \"1\",\n        \"default_shipping\": \"1\",\n        \"created_at\": \"2024-07-24 19:25:51\",\n        \"updated_at\": \"2024-07-24 21:55:41\",\n        \"created_in\": \"Default Store View\",\n        \"dob\": \"1975-10-19\",\n        \"firstname\": \"Test\",\n        \"lastname\": \"Tester\",\n        \"gender\": 1,\n        \"store_id\": 1,\n        \"website_id\": 1,\n        \"middlename\": \"Muramana\",\n        \"prefix\": \"DR\",\n        \"addresses\": [\n            {\n                \"region_id\": 33,\n                \"country_id\": \"US\",\n                \"street\": [\n                    \"6146 Honey Bluff Parkway\"\n                ],\n                \"telephone\": \"(555) 229-1111\",\n                \"postcode\": \"49629-1111\",\n                \"city\": \"Calder\",\n                \"firstname\": \"Test\",\n                \"lastname\": \"Tester\",\n                \"default_shipping\": true,\n                \"default_billing\": true\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{m2_endpoint_api}}/customers",
											"host": [
												"{{m2_endpoint_api}}"
											],
											"path": [
												"customers"
											]
										},
										"description": "Create customer account. Perform necessary business operations like sending email."
									},
									"response": [
										{
											"name": "200 Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer\": {\n    \"email\": \"<string>\",\n    \"firstname\": \"<string>\",\n    \"lastname\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"group_id\": \"<integer>\",\n    \"default_billing\": \"<string>\",\n    \"default_shipping\": \"<string>\",\n    \"confirmation\": \"<string>\",\n    \"created_at\": \"<string>\",\n    \"updated_at\": \"<string>\",\n    \"created_in\": \"<string>\",\n    \"dob\": \"<string>\",\n    \"middlename\": \"<string>\",\n    \"prefix\": \"<string>\",\n    \"suffix\": \"<string>\",\n    \"gender\": \"<integer>\",\n    \"store_id\": \"<integer>\",\n    \"taxvat\": \"<string>\",\n    \"website_id\": \"<integer>\",\n    \"addresses\": [\n      {\n        \"id\": \"<integer>\",\n        \"customer_id\": \"<integer>\",\n        \"region\": {\n          \"region_code\": \"<string>\",\n          \"region\": \"<string>\",\n          \"region_id\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        \"region_id\": \"<integer>\",\n        \"country_id\": \"<string>\",\n        \"street\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"company\": \"<string>\",\n        \"telephone\": \"<string>\",\n        \"fax\": \"<string>\",\n        \"postcode\": \"<string>\",\n        \"city\": \"<string>\",\n        \"firstname\": \"<string>\",\n        \"lastname\": \"<string>\",\n        \"middlename\": \"<string>\",\n        \"prefix\": \"<string>\",\n        \"suffix\": \"<string>\",\n        \"vat_id\": \"<string>\",\n        \"default_shipping\": \"<boolean>\",\n        \"default_billing\": \"<boolean>\",\n        \"extension_attributes\": {},\n        \"custom_attributes\": [\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"id\": \"<integer>\",\n        \"customer_id\": \"<integer>\",\n        \"region\": {\n          \"region_code\": \"<string>\",\n          \"region\": \"<string>\",\n          \"region_id\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        \"region_id\": \"<integer>\",\n        \"country_id\": \"<string>\",\n        \"street\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"company\": \"<string>\",\n        \"telephone\": \"<string>\",\n        \"fax\": \"<string>\",\n        \"postcode\": \"<string>\",\n        \"city\": \"<string>\",\n        \"firstname\": \"<string>\",\n        \"lastname\": \"<string>\",\n        \"middlename\": \"<string>\",\n        \"prefix\": \"<string>\",\n        \"suffix\": \"<string>\",\n        \"vat_id\": \"<string>\",\n        \"default_shipping\": \"<boolean>\",\n        \"default_billing\": \"<boolean>\",\n        \"extension_attributes\": {},\n        \"custom_attributes\": [\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ]\n      }\n    ],\n    \"disable_auto_group_change\": \"<integer>\",\n    \"extension_attributes\": {\n      \"assistance_allowed\": \"<integer>\",\n      \"is_subscribed\": \"<boolean>\"\n    },\n    \"custom_attributes\": [\n      {\n        \"attribute_code\": \"<string>\",\n        \"value\": \"<string>\"\n      },\n      {\n        \"attribute_code\": \"<string>\",\n        \"value\": \"<string>\"\n      }\n    ]\n  },\n  \"password\": \"<string>\",\n  \"redirectUrl\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/customers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"customers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"email\": \"<string>\",\n  \"firstname\": \"<string>\",\n  \"lastname\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"group_id\": \"<integer>\",\n  \"default_billing\": \"<string>\",\n  \"default_shipping\": \"<string>\",\n  \"confirmation\": \"<string>\",\n  \"created_at\": \"<string>\",\n  \"updated_at\": \"<string>\",\n  \"created_in\": \"<string>\",\n  \"dob\": \"<string>\",\n  \"middlename\": \"<string>\",\n  \"prefix\": \"<string>\",\n  \"suffix\": \"<string>\",\n  \"gender\": \"<integer>\",\n  \"store_id\": \"<integer>\",\n  \"taxvat\": \"<string>\",\n  \"website_id\": \"<integer>\",\n  \"addresses\": [\n    {\n      \"id\": \"<integer>\",\n      \"customer_id\": \"<integer>\",\n      \"region\": {\n        \"region_code\": \"<string>\",\n        \"region\": \"<string>\",\n        \"region_id\": \"<integer>\",\n        \"extension_attributes\": {}\n      },\n      \"region_id\": \"<integer>\",\n      \"country_id\": \"<string>\",\n      \"street\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"company\": \"<string>\",\n      \"telephone\": \"<string>\",\n      \"fax\": \"<string>\",\n      \"postcode\": \"<string>\",\n      \"city\": \"<string>\",\n      \"firstname\": \"<string>\",\n      \"lastname\": \"<string>\",\n      \"middlename\": \"<string>\",\n      \"prefix\": \"<string>\",\n      \"suffix\": \"<string>\",\n      \"vat_id\": \"<string>\",\n      \"default_shipping\": \"<boolean>\",\n      \"default_billing\": \"<boolean>\",\n      \"extension_attributes\": {},\n      \"custom_attributes\": [\n        {\n          \"attribute_code\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"attribute_code\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"id\": \"<integer>\",\n      \"customer_id\": \"<integer>\",\n      \"region\": {\n        \"region_code\": \"<string>\",\n        \"region\": \"<string>\",\n        \"region_id\": \"<integer>\",\n        \"extension_attributes\": {}\n      },\n      \"region_id\": \"<integer>\",\n      \"country_id\": \"<string>\",\n      \"street\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"company\": \"<string>\",\n      \"telephone\": \"<string>\",\n      \"fax\": \"<string>\",\n      \"postcode\": \"<string>\",\n      \"city\": \"<string>\",\n      \"firstname\": \"<string>\",\n      \"lastname\": \"<string>\",\n      \"middlename\": \"<string>\",\n      \"prefix\": \"<string>\",\n      \"suffix\": \"<string>\",\n      \"vat_id\": \"<string>\",\n      \"default_shipping\": \"<boolean>\",\n      \"default_billing\": \"<boolean>\",\n      \"extension_attributes\": {},\n      \"custom_attributes\": [\n        {\n          \"attribute_code\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"attribute_code\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"disable_auto_group_change\": \"<integer>\",\n  \"extension_attributes\": {\n    \"assistance_allowed\": \"<integer>\",\n    \"is_subscribed\": \"<boolean>\"\n  },\n  \"custom_attributes\": [\n    {\n      \"attribute_code\": \"<string>\",\n      \"value\": \"<string>\"\n    },\n    {\n      \"attribute_code\": \"<string>\",\n      \"value\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"name": "Internal Server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer\": {\n    \"email\": \"<string>\",\n    \"firstname\": \"<string>\",\n    \"lastname\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"group_id\": \"<integer>\",\n    \"default_billing\": \"<string>\",\n    \"default_shipping\": \"<string>\",\n    \"confirmation\": \"<string>\",\n    \"created_at\": \"<string>\",\n    \"updated_at\": \"<string>\",\n    \"created_in\": \"<string>\",\n    \"dob\": \"<string>\",\n    \"middlename\": \"<string>\",\n    \"prefix\": \"<string>\",\n    \"suffix\": \"<string>\",\n    \"gender\": \"<integer>\",\n    \"store_id\": \"<integer>\",\n    \"taxvat\": \"<string>\",\n    \"website_id\": \"<integer>\",\n    \"addresses\": [\n      {\n        \"id\": \"<integer>\",\n        \"customer_id\": \"<integer>\",\n        \"region\": {\n          \"region_code\": \"<string>\",\n          \"region\": \"<string>\",\n          \"region_id\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        \"region_id\": \"<integer>\",\n        \"country_id\": \"<string>\",\n        \"street\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"company\": \"<string>\",\n        \"telephone\": \"<string>\",\n        \"fax\": \"<string>\",\n        \"postcode\": \"<string>\",\n        \"city\": \"<string>\",\n        \"firstname\": \"<string>\",\n        \"lastname\": \"<string>\",\n        \"middlename\": \"<string>\",\n        \"prefix\": \"<string>\",\n        \"suffix\": \"<string>\",\n        \"vat_id\": \"<string>\",\n        \"default_shipping\": \"<boolean>\",\n        \"default_billing\": \"<boolean>\",\n        \"extension_attributes\": {},\n        \"custom_attributes\": [\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"id\": \"<integer>\",\n        \"customer_id\": \"<integer>\",\n        \"region\": {\n          \"region_code\": \"<string>\",\n          \"region\": \"<string>\",\n          \"region_id\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        \"region_id\": \"<integer>\",\n        \"country_id\": \"<string>\",\n        \"street\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"company\": \"<string>\",\n        \"telephone\": \"<string>\",\n        \"fax\": \"<string>\",\n        \"postcode\": \"<string>\",\n        \"city\": \"<string>\",\n        \"firstname\": \"<string>\",\n        \"lastname\": \"<string>\",\n        \"middlename\": \"<string>\",\n        \"prefix\": \"<string>\",\n        \"suffix\": \"<string>\",\n        \"vat_id\": \"<string>\",\n        \"default_shipping\": \"<boolean>\",\n        \"default_billing\": \"<boolean>\",\n        \"extension_attributes\": {},\n        \"custom_attributes\": [\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ]\n      }\n    ],\n    \"disable_auto_group_change\": \"<integer>\",\n    \"extension_attributes\": {\n      \"assistance_allowed\": \"<integer>\",\n      \"is_subscribed\": \"<boolean>\"\n    },\n    \"custom_attributes\": [\n      {\n        \"attribute_code\": \"<string>\",\n        \"value\": \"<string>\"\n      },\n      {\n        \"attribute_code\": \"<string>\",\n        \"value\": \"<string>\"\n      }\n    ]\n  },\n  \"password\": \"<string>\",\n  \"redirectUrl\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/customers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"customers"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										},
										{
											"name": "Unexpected error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"customer\": {\n    \"email\": \"<string>\",\n    \"firstname\": \"<string>\",\n    \"lastname\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"group_id\": \"<integer>\",\n    \"default_billing\": \"<string>\",\n    \"default_shipping\": \"<string>\",\n    \"confirmation\": \"<string>\",\n    \"created_at\": \"<string>\",\n    \"updated_at\": \"<string>\",\n    \"created_in\": \"<string>\",\n    \"dob\": \"<string>\",\n    \"middlename\": \"<string>\",\n    \"prefix\": \"<string>\",\n    \"suffix\": \"<string>\",\n    \"gender\": \"<integer>\",\n    \"store_id\": \"<integer>\",\n    \"taxvat\": \"<string>\",\n    \"website_id\": \"<integer>\",\n    \"addresses\": [\n      {\n        \"id\": \"<integer>\",\n        \"customer_id\": \"<integer>\",\n        \"region\": {\n          \"region_code\": \"<string>\",\n          \"region\": \"<string>\",\n          \"region_id\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        \"region_id\": \"<integer>\",\n        \"country_id\": \"<string>\",\n        \"street\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"company\": \"<string>\",\n        \"telephone\": \"<string>\",\n        \"fax\": \"<string>\",\n        \"postcode\": \"<string>\",\n        \"city\": \"<string>\",\n        \"firstname\": \"<string>\",\n        \"lastname\": \"<string>\",\n        \"middlename\": \"<string>\",\n        \"prefix\": \"<string>\",\n        \"suffix\": \"<string>\",\n        \"vat_id\": \"<string>\",\n        \"default_shipping\": \"<boolean>\",\n        \"default_billing\": \"<boolean>\",\n        \"extension_attributes\": {},\n        \"custom_attributes\": [\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ]\n      },\n      {\n        \"id\": \"<integer>\",\n        \"customer_id\": \"<integer>\",\n        \"region\": {\n          \"region_code\": \"<string>\",\n          \"region\": \"<string>\",\n          \"region_id\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        \"region_id\": \"<integer>\",\n        \"country_id\": \"<string>\",\n        \"street\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"company\": \"<string>\",\n        \"telephone\": \"<string>\",\n        \"fax\": \"<string>\",\n        \"postcode\": \"<string>\",\n        \"city\": \"<string>\",\n        \"firstname\": \"<string>\",\n        \"lastname\": \"<string>\",\n        \"middlename\": \"<string>\",\n        \"prefix\": \"<string>\",\n        \"suffix\": \"<string>\",\n        \"vat_id\": \"<string>\",\n        \"default_shipping\": \"<boolean>\",\n        \"default_billing\": \"<boolean>\",\n        \"extension_attributes\": {},\n        \"custom_attributes\": [\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"attribute_code\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ]\n      }\n    ],\n    \"disable_auto_group_change\": \"<integer>\",\n    \"extension_attributes\": {\n      \"assistance_allowed\": \"<integer>\",\n      \"is_subscribed\": \"<boolean>\"\n    },\n    \"custom_attributes\": [\n      {\n        \"attribute_code\": \"<string>\",\n        \"value\": \"<string>\"\n      },\n      {\n        \"attribute_code\": \"<string>\",\n        \"value\": \"<string>\"\n      }\n    ]\n  },\n  \"password\": \"<string>\",\n  \"redirectUrl\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/customers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"customers"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "M2: user login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body is a string\", function () {",
													"    const token = pm.response.text().replace(/['\"]+/g, '');",
													"    pm.expect(token).to.be.a('string');",
													"    pm.environment.set('gen_customerToken', token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{created_customer_1_email}}\",\n  \"password\": \"{{created_customer_1_pass}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{m2_endpoint_api}}/integration/customer/token",
											"host": [
												"{{m2_endpoint_api}}"
											],
											"path": [
												"integration",
												"customer",
												"token"
											]
										},
										"description": "Create access token for admin given the customer credentials."
									},
									"response": [
										{
											"name": "200 Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "<string>"
										},
										{
											"name": "400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										},
										{
											"name": "Unexpected error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "M2: Token API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has token\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.token).to.be.a('string')",
													"    pm.environment.set(\"gen_sgToken\", jsonData.token);",
													"    pm.expect(jsonData.expiration).to.be.a('number');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_customerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_api_sgwebc}}/me/token",
											"host": [
												"{{m2_endpoint_api_sgwebc}}"
											],
											"path": [
												"me",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: auto-login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check login status\", function () {",
													"    const bodyClass = $('body.customer-account-index');",
													"    pm.expect(bodyClass,'Is not customer account page').to.be.lengthOf(1);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"login"
											],
											"query": [
												{
													"key": "token",
													"value": "{{gen_sgToken}}"
												},
												{
													"key": "redirectTo",
													"value": "customer/account"
												},
												{
													"key": "sgcloud_checkout",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: save authToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check controller\", function () {",
													"    const bodyClass = $('body.sgwebcheckout-account-registered');",
													"    pm.expect(bodyClass).to.be.lengthOf(1);",
													"});",
													"",
													"pm.test(\"Check registered token\", function () {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.properties.token).to.be.a('string', 'no token in property export');",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
													"    // save token to test FPC & auto-logout later",
													"    pm.environment.set(\"gen_customer_1_authToken\", definition.properties.token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/registered",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"registered"
											]
										}
									},
									"response": []
								},
								{
									"name": "M2A: delete customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_api}}/customers/:id",
											"host": [
												"{{m2_endpoint_api}}"
											],
											"path": [
												"customers",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{gen_customer_1_id}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Not clearing session after created customer, thus checking if auto-logout is happening on 2nd customer login"
						},
						{
							"name": "libshopgate",
							"item": [
								{
									"name": "M2: user login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body is a string\", function () {",
													"    const token = pm.response.text().replace(/['\"]+/g, '');",
													"    pm.expect(token).to.be.a('string');",
													"    pm.environment.set('gen_customerToken', token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{default_customer_email}}\",\n  \"password\": \"{{default_customer_pass}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{m2_endpoint_api}}/integration/customer/token",
											"host": [
												"{{m2_endpoint_api}}"
											],
											"path": [
												"integration",
												"customer",
												"token"
											]
										},
										"description": "Create access token for admin given the customer credentials."
									},
									"response": [
										{
											"name": "200 Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "<string>"
										},
										{
											"name": "400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										},
										{
											"name": "Unexpected error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "M2: Token API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has token\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.token).to.be.a('string')",
													"    pm.environment.set(\"gen_sgToken\", jsonData.token);",
													"    pm.expect(jsonData.expiration).to.be.a('number');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_customerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_api_sgwebc}}/me/token",
											"host": [
												"{{m2_endpoint_api_sgwebc}}"
											],
											"path": [
												"me",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: auto-login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check body class is SG\", function () {",
													"    const bodyClass = $('body.is-sg-app');",
													"    pm.expect(bodyClass).to.be.lengthOf(1);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"login"
											],
											"query": [
												{
													"key": "token",
													"value": "{{gen_sgToken}}"
												},
												{
													"key": "redirectTo",
													"value": "customer/account"
												},
												{
													"key": "sgcloud_checkout",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: auto-login (no header)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check body class is not SG\", function () {",
													"    const bodyClass = $('body.is-sg-app');",
													"    pm.expect(bodyClass).to.be.lengthOf(0);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be false').to.be.false;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"login"
											],
											"query": [
												{
													"key": "token",
													"value": "{{gen_sgToken}}"
												},
												{
													"key": "redirectTo",
													"value": "customer/account"
												},
												{
													"key": "sgcloud_checkout",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Checking whether JS code affected by User-Agent is not getting cached"
						},
						{
							"name": "GET sgWebView",
							"item": [
								{
									"name": "M2: user login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body is a string\", function () {",
													"    const token = pm.response.text().replace(/['\"]+/g, '');",
													"    pm.expect(token).to.be.a('string');",
													"    pm.environment.set('gen_customerToken', token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "shopgate-check",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{default_customer_email}}\",\n  \"password\": \"{{default_customer_pass}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{m2_endpoint_api}}/integration/customer/token",
											"host": [
												"{{m2_endpoint_api}}"
											],
											"path": [
												"integration",
												"customer",
												"token"
											]
										},
										"description": "Create access token for admin given the customer credentials."
									},
									"response": [
										{
											"name": "200 Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "<string>"
										},
										{
											"name": "400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										},
										{
											"name": "Unexpected error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "M2: Token API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has token\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.token).to.be.a('string')",
													"    pm.environment.set(\"gen_sgToken\", jsonData.token);",
													"    pm.expect(jsonData.expiration).to.be.a('number');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_customerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_api_sgwebc}}/me/token",
											"host": [
												"{{m2_endpoint_api_sgwebc}}"
											],
											"path": [
												"me",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: auto-login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check body class is SG\", function () {",
													"    const bodyClass = $('body.is-sg-app');",
													"    pm.expect(bodyClass).to.be.lengthOf(1);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1&sgWebView=1",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"login"
											],
											"query": [
												{
													"key": "token",
													"value": "{{gen_sgToken}}"
												},
												{
													"key": "redirectTo",
													"value": "customer/account"
												},
												{
													"key": "sgcloud_checkout",
													"value": "1"
												},
												{
													"key": "sgWebView",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: persist check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check body class is SG\", function () {",
													"    const bodyClass = $('body.is-sg-app');",
													"    pm.expect(bodyClass).to.be.lengthOf(1);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/checkout/cart",
											"host": [
												"{{domain}}"
											],
											"path": [
												"checkout",
												"cart"
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: auto-login (no param)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check body class is not SG\", function () {",
													"    const bodyClass = $('body.is-sg-app');",
													"    pm.expect(bodyClass).to.be.lengthOf(0);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be false').to.be.false;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1&sgWebView=0",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"login"
											],
											"query": [
												{
													"key": "token",
													"value": "{{gen_sgToken}}"
												},
												{
													"key": "redirectTo",
													"value": "customer/account"
												},
												{
													"key": "sgcloud_checkout",
													"value": "1"
												},
												{
													"key": "sgWebView",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: persist check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check body class is not SG\", function () {",
													"    const bodyClass = $('body.is-sg-app');",
													"    pm.expect(bodyClass).to.be.lengthOf(0);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be false').to.be.false;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{domain}}/checkout/cart",
											"host": [
												"{{domain}}"
											],
											"path": [
												"checkout",
												"cart"
											]
										}
									},
									"response": []
								}
							],
							"description": "Checking developer GET param"
						},
						{
							"name": "Anonymous logout",
							"item": [
								{
									"name": "M2: user login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body is a string\", function () {",
													"    const token = pm.response.text().replace(/['\"]+/g, '');",
													"    pm.expect(token).to.be.a('string');",
													"    pm.environment.set('gen_customerToken', token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Shopgate-Check",
												"value": "true",
												"description": "allows to set token expiration to a year",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{default_customer_email}}\",\n  \"password\": \"{{default_customer_pass}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{m2_endpoint_api}}/integration/customer/token",
											"host": [
												"{{m2_endpoint_api}}"
											],
											"path": [
												"integration",
												"customer",
												"token"
											]
										},
										"description": "Create access token for admin given the customer credentials."
									},
									"response": [
										{
											"name": "200 Success.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "<string>"
										},
										{
											"name": "400 Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										},
										{
											"name": "Unexpected error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/V1/integration/customer/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"V1",
														"integration",
														"customer",
														"token"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "M2: Token API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has token\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.token).to.be.a('string')",
													"    pm.environment.set(\"gen_sgToken\", jsonData.token);",
													"    pm.expect(jsonData.expiration).to.be.a('number');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{gen_customerToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{m2_endpoint_api_sgwebc}}/me/token",
											"host": [
												"{{m2_endpoint_api_sgwebc}}"
											],
											"path": [
												"me",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: check customer accnt page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check login status\", function () {",
													"    const bodyClass = $('body.customer-account-index');",
													"    pm.expect(bodyClass).to.be.lengthOf(1);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"login"
											],
											"query": [
												{
													"key": "token",
													"value": "{{gen_sgToken}}"
												},
												{
													"key": "redirectTo",
													"value": "customer/account"
												},
												{
													"key": "sgcloud_checkout",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "M2: get anon token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Has token\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.token).to.be.a('string')",
													"    pm.environment.set(\"gen_guest_sgToken\", jsonData.token);",
													"    pm.expect(jsonData.expiration).to.be.a('number');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{m2_endpoint_api_sgwebc}}/anonymous/token",
											"host": [
												"{{m2_endpoint_api_sgwebc}}"
											],
											"path": [
												"anonymous",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "FE: check not logged in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Load the HTML response to $",
													"const pkg = require('cheerio')",
													"const $ = pkg.load(pm.response.text());",
													"",
													"pm.test(\"Check login status\", function () {",
													"    const bodyClass = $('body.customer-account-login');",
													"    pm.expect(bodyClass).to.be.lengthOf(1);",
													"});",
													"",
													"pm.test('Check SG Web View', () => {",
													"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
													"    pm.expect(script).to.be.lengthOf(1);",
													"",
													"    // data test",
													"    pm.expect(script[0].children[0].data).to.be.a('string');",
													"    const data = JSON.parse(script[0].children[0].data);",
													"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
													"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "User-Agent",
												"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_guest_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1",
											"host": [
												"{{m2_endpoint_fe_sgwebc}}"
											],
											"path": [
												"account",
												"login"
											],
											"query": [
												{
													"key": "token",
													"value": "{{gen_guest_sgToken}}"
												},
												{
													"key": "redirectTo",
													"value": "customer/account"
												},
												{
													"key": "sgcloud_checkout",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Makes sure that guest without a cart logs out the previous customer from the session"
						}
					],
					"description": "Testing customer controller FPC. Making sure the parts that shouldn't be cached are not cached (e.g. pipeline authToken calls)\n\nUnfortunately, I cannot test the \"checkout success\" page & whether it gets cached. Supposedly it shouldn't as the default M2 sets it to be non-cachable, but maybe one day..."
				},
				{
					"name": "M2: user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is a string\", function () {",
									"    const token = pm.response.text().replace(/['\"]+/g, '');",
									"    pm.expect(token).to.be.a('string');",
									"    pm.environment.set('gen_customerToken', token);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Shopgate-Check",
								"value": "true",
								"description": "allows to set token expiration to a year",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{default_customer_email}}\",\n  \"password\": \"{{default_customer_pass}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_api}}/integration/customer/token",
							"host": [
								"{{m2_endpoint_api}}"
							],
							"path": [
								"integration",
								"customer",
								"token"
							]
						},
						"description": "Create access token for admin given the customer credentials."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "<string>"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/integration/customer/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"integration",
										"customer",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "M2: Token API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string')",
									"    pm.environment.set(\"gen_sgToken\", jsonData.token);",
									"    pm.expect(jsonData.expiration).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_customerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/me/token",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								"me",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: auto-login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check login status\", function () {",
									"    const bodyClass = $('body.customer-account-index');",
									"    pm.expect(bodyClass).to.be.lengthOf(1);",
									"});",
									"",
									"pm.test('Check SG Web View', () => {",
									"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
									"    pm.expect(script).to.be.lengthOf(1);",
									"",
									"    // data test",
									"    pm.expect(script[0].children[0].data).to.be.a('string');",
									"    const data = JSON.parse(script[0].children[0].data);",
									"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
									"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_sgToken}}&redirectTo=customer/account&sgcloud_checkout=1",
							"host": [
								"{{m2_endpoint_fe_sgwebc}}"
							],
							"path": [
								"account",
								"login"
							],
							"query": [
								{
									"key": "token",
									"value": "{{gen_sgToken}}"
								},
								{
									"key": "redirectTo",
									"value": "customer/account"
								},
								{
									"key": "sgcloud_checkout",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: customer session persistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check login status\", function () {",
									"    const bodyClass = $('body.customer-account-index');",
									"    pm.expect(bodyClass).to.be.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{domain}}/customer/account",
							"host": [
								"{{domain}}"
							],
							"path": [
								"customer",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: check registered token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check controller\", function () {",
									"    const bodyClass = $('body.sgwebcheckout-account-registered');",
									"    pm.expect(bodyClass).to.be.lengthOf(1);",
									"});",
									"pm.test(\"Check registered token\", function () {",
									"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
									"    pm.expect(script).to.be.lengthOf(1);",
									"",
									"    // data test",
									"    pm.expect(script[0].children[0].data).to.be.a('string');",
									"    const data = JSON.parse(script[0].children[0].data);",
									"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
									"    pm.expect(definition.properties.token).to.be.a('string', 'no token in property export');",
									"",
									"    // check that FPC did not cache previous customer token",
									"    pm.expect(definition.properties.token).to.not.eql(",
									"        pm.environment.get('gen_customer_1_authToken'),",
									"        'FPC cached previius customer authToken'",
									"    );",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{m2_endpoint_fe_sgwebc}}/account/registered",
							"host": [
								"{{m2_endpoint_fe_sgwebc}}"
							],
							"path": [
								"account",
								"registered"
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: unset cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check login status\", function () {",
									"    const bodyClass = $('body.customer-account-login');",
									"    pm.expect(bodyClass).to.be.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Allow cookie deletion by going to cookies -> Domain Allowlist",
									"const jar = pm.cookies.jar();",
									"jar.unset(pm.environment.get(\"host\"), 'PHPSESSID', function (error) {",
									"    if (error) {",
									"        console.log(error.message)",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/customer/account",
							"host": [
								"{{domain}}"
							],
							"path": [
								"customer",
								"account"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Guest (with cart)",
			"item": [
				{
					"name": "M2: create guest cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body is a string\", function () {",
									"    const cartId = pm.response.text().replace(/['\"]+/g, '');",
									"    pm.expect(cartId).to.be.a('string');",
									"    pm.environment.set('gen_cartId', cartId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{m2_endpoint_api}}/guest-carts",
							"host": [
								"{{m2_endpoint_api}}"
							],
							"path": [
								"guest-carts"
							]
						},
						"description": "Enable an customer or guest user to create an empty cart and quote for an anonymous customer."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "<string>"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "M2: add prod 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Make sure product was added\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors, 'item was not added!').to.be.undefined",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Allow cookie deletion by going to cookies -> Domain Allowlist",
									"const jar = pm.cookies.jar();",
									"jar.unset(pm.environment.get(\"host\"), 'PHPSESSID', function (error) {",
									"    if (error) {",
									"        console.log(error.message)",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\n  addSimpleProductsToCart(\n    input: {\n      cart_id: \"{{gen_cartId}}\", \n      cart_items: [{\n        data: {\n          quantity: 1\n          sku: \"24-WG02\"\n        }\n      }]\n    }) {\n    cart {\n      id\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{domain}}/graphql",
							"host": [
								"{{domain}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Add/update the specified cart item."
					},
					"response": [
						{
							"name": "200 Success.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cartItem\": {\n    \"qty\": \"<number>\",\n    \"quote_id\": \"<string>\",\n    \"item_id\": \"<integer>\",\n    \"sku\": \"<string>\",\n    \"name\": \"<string>\",\n    \"price\": \"<number>\",\n    \"product_type\": \"<string>\",\n    \"product_option\": {\n      \"extension_attributes\": {\n        \"custom_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          }\n        ],\n        \"bundle_options\": [\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          }\n        ],\n        \"downloadable_option\": {\n          \"downloadable_links\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"configurable_item_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ],\n        \"grouped_options\": [\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ]\n      }\n    },\n    \"extension_attributes\": {\n      \"discounts\": [\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        },\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts/:cartId/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"qty\": \"<number>\",\n  \"quote_id\": \"<string>\",\n  \"item_id\": \"<integer>\",\n  \"sku\": \"<string>\",\n  \"name\": \"<string>\",\n  \"price\": \"<number>\",\n  \"product_type\": \"<string>\",\n  \"product_option\": {\n    \"extension_attributes\": {\n      \"custom_options\": [\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<string>\",\n          \"extension_attributes\": {\n            \"file_info\": {\n              \"base64_encoded_data\": \"<string>\",\n              \"type\": \"<string>\",\n              \"name\": \"<string>\"\n            }\n          }\n        },\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<string>\",\n          \"extension_attributes\": {\n            \"file_info\": {\n              \"base64_encoded_data\": \"<string>\",\n              \"type\": \"<string>\",\n              \"name\": \"<string>\"\n            }\n          }\n        }\n      ],\n      \"bundle_options\": [\n        {\n          \"option_id\": \"<integer>\",\n          \"option_qty\": \"<integer>\",\n          \"option_selections\": [\n            \"<integer>\",\n            \"<integer>\"\n          ],\n          \"extension_attributes\": {}\n        },\n        {\n          \"option_id\": \"<integer>\",\n          \"option_qty\": \"<integer>\",\n          \"option_selections\": [\n            \"<integer>\",\n            \"<integer>\"\n          ],\n          \"extension_attributes\": {}\n        }\n      ],\n      \"downloadable_option\": {\n        \"downloadable_links\": [\n          \"<integer>\",\n          \"<integer>\"\n        ]\n      },\n      \"configurable_item_options\": [\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        {\n          \"option_id\": \"<string>\",\n          \"option_value\": \"<integer>\",\n          \"extension_attributes\": {}\n        }\n      ],\n      \"grouped_options\": [\n        {\n          \"id\": \"<integer>\",\n          \"qty\": \"<integer>\",\n          \"extension_attributes\": {}\n        },\n        {\n          \"id\": \"<integer>\",\n          \"qty\": \"<integer>\",\n          \"extension_attributes\": {}\n        }\n      ]\n    }\n  },\n  \"extension_attributes\": {\n    \"discounts\": [\n      {\n        \"discount_data\": {\n          \"amount\": \"<number>\",\n          \"base_amount\": \"<number>\",\n          \"original_amount\": \"<number>\",\n          \"base_original_amount\": \"<number>\"\n        },\n        \"rule_label\": \"<string>\",\n        \"rule_id\": \"<integer>\"\n      },\n      {\n        \"discount_data\": {\n          \"amount\": \"<number>\",\n          \"base_amount\": \"<number>\",\n          \"original_amount\": \"<number>\",\n          \"base_original_amount\": \"<number>\"\n        },\n        \"rule_label\": \"<string>\",\n        \"rule_id\": \"<integer>\"\n      }\n    ]\n  }\n}"
						},
						{
							"name": "400 Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cartItem\": {\n    \"qty\": \"<number>\",\n    \"quote_id\": \"<string>\",\n    \"item_id\": \"<integer>\",\n    \"sku\": \"<string>\",\n    \"name\": \"<string>\",\n    \"price\": \"<number>\",\n    \"product_type\": \"<string>\",\n    \"product_option\": {\n      \"extension_attributes\": {\n        \"custom_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          }\n        ],\n        \"bundle_options\": [\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          }\n        ],\n        \"downloadable_option\": {\n          \"downloadable_links\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"configurable_item_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ],\n        \"grouped_options\": [\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ]\n      }\n    },\n    \"extension_attributes\": {\n      \"discounts\": [\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        },\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts/:cartId/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						},
						{
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cartItem\": {\n    \"qty\": \"<number>\",\n    \"quote_id\": \"<string>\",\n    \"item_id\": \"<integer>\",\n    \"sku\": \"<string>\",\n    \"name\": \"<string>\",\n    \"price\": \"<number>\",\n    \"product_type\": \"<string>\",\n    \"product_option\": {\n      \"extension_attributes\": {\n        \"custom_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<string>\",\n            \"extension_attributes\": {\n              \"file_info\": {\n                \"base64_encoded_data\": \"<string>\",\n                \"type\": \"<string>\",\n                \"name\": \"<string>\"\n              }\n            }\n          }\n        ],\n        \"bundle_options\": [\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<integer>\",\n            \"option_qty\": \"<integer>\",\n            \"option_selections\": [\n              \"<integer>\",\n              \"<integer>\"\n            ],\n            \"extension_attributes\": {}\n          }\n        ],\n        \"downloadable_option\": {\n          \"downloadable_links\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"configurable_item_options\": [\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"option_id\": \"<string>\",\n            \"option_value\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ],\n        \"grouped_options\": [\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          },\n          {\n            \"id\": \"<integer>\",\n            \"qty\": \"<integer>\",\n            \"extension_attributes\": {}\n          }\n        ]\n      }\n    },\n    \"extension_attributes\": {\n      \"discounts\": [\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        },\n        {\n          \"discount_data\": {\n            \"amount\": \"<number>\",\n            \"base_amount\": \"<number>\",\n            \"original_amount\": \"<number>\",\n            \"base_original_amount\": \"<number>\"\n          },\n          \"rule_label\": \"<string>\",\n          \"rule_id\": \"<integer>\"\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/V1/guest-carts/:cartId/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"V1",
										"guest-carts",
										":cartId",
										"items"
									],
									"variable": [
										{
											"key": "cartId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errors\": [\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"message\": \"<string>\",\n      \"parameters\": [\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        },\n        {\n          \"resources\": \"<string>\",\n          \"fieldName\": \"<string>\",\n          \"fieldValue\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"code\": \"<integer>\",\n  \"parameters\": [\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    },\n    {\n      \"resources\": \"<string>\",\n      \"fieldName\": \"<string>\",\n      \"fieldValue\": \"<string>\"\n    }\n  ],\n  \"trace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "M2: Guest Token API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string')",
									"    pm.environment.set(\"gen_guest_sgToken\", jsonData.token);",
									"    pm.expect(jsonData.expiration).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/:cartId/token",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								":cartId",
								"token"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{gen_cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: auto-login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check we are on checkout page\", function () {",
									"    const body = $('body.checkout-index-index');",
									"    pm.expect(body).to.be.lengthOf(1);",
									"});",
									"",
									"pm.test('Check SG Web View', () => {",
									"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
									"    pm.expect(script).to.be.lengthOf(1);",
									"",
									"    // data test",
									"    pm.expect(script[0].children[0].data).to.be.a('string');",
									"    const data = JSON.parse(script[0].children[0].data);",
									"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
									"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?sgcloud_checkout=1&token={{gen_guest_sgToken}}",
							"host": [
								"{{m2_endpoint_fe_sgwebc}}"
							],
							"path": [
								"account",
								"login"
							],
							"query": [
								{
									"key": "sgcloud_checkout",
									"value": "1"
								},
								{
									"key": "redirectTo",
									"value": "registered",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{gen_guest_sgToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FE:  check register page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check page\", function () {",
									"    const input = $('body.is-sg-app.customer-account-create');",
									"    pm.expect(input).to.be.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?sgcloud_checkout=1&redirectTo={{domain}}/customer/account/create&token={{gen_guest_sgToken}}",
							"host": [
								"{{m2_endpoint_fe_sgwebc}}"
							],
							"path": [
								"account",
								"login"
							],
							"query": [
								{
									"key": "sgcloud_checkout",
									"value": "1"
								},
								{
									"key": "redirectTo",
									"value": "{{domain}}/customer/account/create"
								},
								{
									"key": "token",
									"value": "{{gen_guest_sgToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: check cart persistent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check login status\", function () {",
									"    const input = $('input[data-item-qty]');",
									"    pm.expect(input).to.be.lengthOf(1);",
									"    pm.expect(input[0].attribs.value).to.eql('1');",
									"});",
									"",
									"pm.test('Check SG Web View', () => {",
									"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
									"    pm.expect(script).to.be.lengthOf(1);",
									"",
									"    // data test",
									"    pm.expect(script[0].children[0].data).to.be.a('string');",
									"    const data = JSON.parse(script[0].children[0].data);",
									"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
									"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{domain}}/checkout/cart",
							"host": [
								"{{domain}}"
							],
							"path": [
								"checkout",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: unset cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check login status\", function () {",
									"    const input = $('.cart-empty');",
									"    pm.expect(input).to.be.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Allow cookie deletion by going to cookies -> Domain Allowlist",
									"const jar = pm.cookies.jar();",
									"jar.unset(pm.environment.get(\"host\"), 'PHPSESSID', function (error) {",
									"    if (error) {",
									"        console.log(error.message)",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/checkout/cart",
							"host": [
								"{{domain}}"
							],
							"path": [
								"checkout",
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Anon | Guest (no cart)",
			"item": [
				{
					"name": "M2: Guest Token API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.be.a('string')",
									"    pm.environment.set(\"gen_guest_sgToken\", jsonData.token);",
									"    pm.expect(jsonData.expiration).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/anonymous/token",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								"anonymous",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: auto-login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check we are on empty cart page\", function () {",
									"    const body = $('body.checkout-cart-index');",
									"    pm.expect(body).to.be.lengthOf(1);",
									"});",
									"",
									"pm.test('Check SG Web View', () => {",
									"    const script = $('script[type=\"text/x-magento-init\"]:contains(\"Shopgate_WebCheckout\")');",
									"    pm.expect(script).to.be.lengthOf(1);",
									"",
									"    // data test",
									"    pm.expect(script[0].children[0].data).to.be.a('string');",
									"    const data = JSON.parse(script[0].children[0].data);",
									"    const definition = data['*']['Shopgate_WebCheckout/js/init'];",
									"    pm.expect(definition.isSgWebView, 'Expected isSgWebView to be true').to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?sgcloud_checkout=1&token={{gen_guest_sgToken}}",
							"host": [
								"{{m2_endpoint_fe_sgwebc}}"
							],
							"path": [
								"account",
								"login"
							],
							"query": [
								{
									"key": "sgcloud_checkout",
									"value": "1"
								},
								{
									"key": "redirectTo",
									"value": "registered",
									"disabled": true
								},
								{
									"key": "token",
									"value": "{{gen_guest_sgToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FE:  check register page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check page\", function () {",
									"    const input = $('body.is-sg-app.customer-account-create');",
									"    pm.expect(input).to.be.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?sgcloud_checkout=1&redirectTo={{domain}}/customer/account/create&token={{gen_guest_sgToken}}",
							"host": [
								"{{m2_endpoint_fe_sgwebc}}"
							],
							"path": [
								"account",
								"login"
							],
							"query": [
								{
									"key": "sgcloud_checkout",
									"value": "1"
								},
								{
									"key": "redirectTo",
									"value": "{{domain}}/customer/account/create"
								},
								{
									"key": "token",
									"value": "{{gen_guest_sgToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: unset cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check login status\", function () {",
									"    const input = $('.cart-empty');",
									"    pm.expect(input).to.be.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Allow cookie deletion by going to cookies -> Domain Allowlist",
									"const jar = pm.cookies.jar();",
									"jar.unset(pm.environment.get(\"host\"), 'PHPSESSID', function (error) {",
									"    if (error) {",
									"        console.log(error.message)",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/checkout/cart",
							"host": [
								"{{domain}}"
							],
							"path": [
								"checkout",
								"cart"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ID / SKU endpoints",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "M2: get simple prod (watch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number');",
											"    pm.environment.set(\"gen_simple_product1_id\", jsonData.id);",
											"    pm.expect(jsonData.sku).to.be.a('string').to.not.be.empty;",
											"    pm.environment.set(\"gen_simple_product1_sku\", jsonData.sku);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api}}/products/24-WG02",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"products",
										"24-WG02"
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: attr set id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    var jsonData = pm.response.json();",
											"    // Stores the attributeSetId in an environment or global variable",
											"    var attributeSetId = jsonData.items[0].attribute_set_id;",
											"    pm.environment.set(\"gen_attributeSetId\", attributeSetId);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api}}/eav/attribute-sets/list?searchCriteria[filter_groups][0][filters][0][field]=attribute_set_name&searchCriteria[filter_groups][0][filters][0][value]=Top&searchCriteria[filter_groups][0][filters][0][condition_type]=eq",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"eav",
										"attribute-sets",
										"list"
									],
									"query": [
										{
											"key": "searchCriteria[filter_groups][0][filters][0][field]",
											"value": "attribute_set_name"
										},
										{
											"key": "searchCriteria[filter_groups][0][filters][0][value]",
											"value": "Top"
										},
										{
											"key": "searchCriteria[filter_groups][0][filters][0][condition_type]",
											"value": "eq"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: attr values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get needed values\", function () {",
											"    ",
											"    findValue(\"tax_class_id\", \"Taxable Goods\");",
											"    findValue(\"color\", \"Gray\");",
											"    findValue(\"visibility\", \"Catalog, Search\");",
											"    findValue(\"visibility\", \"Not Visible Individually\");",
											"    findValue(\"material\", \"Hemp\");",
											"    findValue(\"pattern\", \"Graphic Print\");",
											"    findValue(\"size\", \"S\");",
											"    findValue(\"size\", \"M\");",
											"    findValue(\"size\", \"L\");",
											"});",
											"",
											"function findValue(attributeCode, label) {",
											"    var response = pm.response.json();",
											"    // Find the attribute with the specified attributeCode",
											"    var attribute = response.find(attr => attr.attribute_code === attributeCode);",
											"",
											"    pm.expect(attribute, 'attrCode: ' + attributeCode).to.not.be.undefined;",
											"    pm.environment.set('gen_attr_' + attributeCode + '_id', attribute.attribute_id);",
											"    var option = attribute.options.find(opt => opt.label === label);",
											"    pm.expect(option, 'option: ' + label).to.not.be.undefined;",
											"    pm.expect(option).to.haveOwnProperty('value')",
											"",
											"    // Create a dynamic environment variable name",
											"    var envVarName = `gen_attr_${attributeCode}_${label.toLowerCase().replace(/[\\s,.]/g, '_')}`;",
											"    pm.environment.set(envVarName, option.value);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api}}/products/attribute-sets/:attributeSetId/attributes",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"products",
										"attribute-sets",
										":attributeSetId",
										"attributes"
									],
									"variable": [
										{
											"key": "attributeSetId",
											"value": "{{gen_attributeSetId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"function findChildByName(data, name) {",
											"    // Check if the current node matches the name",
											"    if (data.name === name) {",
											"        return data.id;",
											"    }",
											"",
											"    // Traverse the children_data recursively",
											"    for (var i = 0; i < data.children_data.length; i++) {",
											"        var result = findChildByName(data.children_data[i], name);",
											"        if (result !== null) {",
											"            return result;",
											"        }",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get needed values\", function () {",
											"    findAndSaveChildId(\"Men\");",
											"    findAndSaveChildId(\"Tops\");",
											"    findAndSaveChildId(\"Tees\");",
											"});",
											"",
											"function findAndSaveChildId(name) {",
											"    var response = pm.response.json();",
											"    var id = findChildByName(response, name);",
											"",
											"    pm.expect(id, 'Child name: ' + name).to.not.be.null;",
											"",
											"    // Create a dynamic environment variable name",
											"    var envVarName = `gen_category_${name.toLowerCase().replace(/[\\s,.]/g, '_')}_id`;",
											"    pm.environment.set(envVarName, id);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api}}/categories",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: config create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number');",
											"    pm.environment.set(\"gen_config_parent_product1_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"product\": {\n            \"sku\": \"{{created_prod_config_champ_sku}}\",\n            \"name\": \"Champ Tee\",\n            \"attribute_set_id\": {{gen_attributeSetId}},\n            \"status\": 1,\n            \"visibility\": {{gen_attr_visibility_catalog__search}},\n            \"type_id\": \"configurable\",\n            \"weight\": \"0.5\",\n            \"extension_attributes\": {\n                \"category_links\": [\n                    {\n                        \"position\": 0,\n                        \"category_id\": \"{{gen_category_men_id}}\"\n                    },\n                    {\n                        \"position\": 1,\n                        \"category_id\": \"{{gen_category_tees_id}}\"\n                    },\n                    {\n                        \"position\": 2,\n                        \"category_id\": \"{{gen_category_tops_id}}\"\n                    }\n                ]\n            },\n            \"custom_attributes\": [\n                {\n                    \"attribute_code\": \"description\",\n                    \"value\": \"The Champ Tee keeps you cool and dry while you do your thing. Let everyone know who you are by adding your name on the back for only $10.\"\n                },\n                {\n                    \"attribute_code\": \"tax_class_id\",\n                    \"value\": \"{{gen_attr_tax_class_id_taxable_goods}}\"\n                },\n                {\n                    \"attribute_code\": \"material\",\n                    \"value\": \"{{gen_attr_material_hemp}}\"\n                },\n                {\n                    \"attribute_code\": \"pattern\",\n                    \"value\": \"{{gen_attr_pattern_graphic_print}}\"\n                },\n                {\n                    \"attribute_code\": \"color\",\n                    \"value\": \"{{gen_attr_color_gray}}\"\n                }\n            ]\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{m2_endpoint_api}}/products",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: child M create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.be.a('number');",
											"    pm.environment.set(\"gen_config_child_product1_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"product\": {\n            \"sku\": \"{{created_prod_child_champ_m_sku}}\",\n            \"name\": \"Champ Tee Small\",\n            \"attribute_set_id\": {{gen_attributeSetId}},\n            \"price\": 25,\n            \"status\": 1,\n            \"visibility\": {{gen_attr_visibility_not_visible_individually}},\n            \"type_id\": \"simple\",\n            \"weight\": \"0.5\",\n            \"extension_attributes\": {\n                \"category_links\": [\n                    {\n                        \"position\": 0,\n                        \"category_id\": \"{{gen_category_men_id}}\"\n                    },\n                    {\n                        \"position\": 1,\n                        \"category_id\": \"{{gen_category_tees_id}}\"\n                    },\n                    {\n                        \"position\": 2,\n                        \"category_id\": \"{{gen_category_tops_id}}\"\n                    }\n                ],\n                \"stock_item\": {\n                    \"qty\": \"10\",\n                    \"is_in_stock\": true\n                }\n            },\n            \"custom_attributes\": [\n                {\n                    \"attribute_code\": \"description\",\n                    \"value\": \"The Champ Tee keeps you cool and dry while you do your thing. Let everyone know who you are by adding your name on the back for only $10.\"\n                },\n                {\n                    \"attribute_code\": \"tax_class_id\",\n                    \"value\": \"{{gen_attr_tax_class_id_taxable_goods}}\"\n                },\n                {\n                    \"attribute_code\": \"material\",\n                    \"value\": \"{{gen_attr_material_hemp}}\"\n                },\n                {\n                    \"attribute_code\": \"pattern\",\n                    \"value\": \"{{gen_attr_pattern_graphic_print}}\"\n                },\n                {\n                    \"attribute_code\": \"color\",\n                    \"value\": \"{{gen_attr_color_gray}}\"\n                },\n                {\n                    \"attribute_code\": \"size\",\n                    \"value\": \"{{gen_attr_size_s}}\"\n                }\n            ]\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{m2_endpoint_api}}/products",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: link size to parent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"option\": {\n        \"attribute_id\": \"{{gen_attr_size_id}}\",\n        \"label\": \"Size\",\n        \"position\": 0,\n        \"is_use_default\": true,\n        \"values\": [\n            {\n                \"value_index\": 9\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{m2_endpoint_api}}/configurable-products/:sku/options",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"configurable-products",
										":sku",
										"options"
									],
									"variable": [
										{
											"key": "sku",
											"value": "{{created_prod_config_champ_sku}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: link child to parent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"childSku\": \"{{created_prod_child_champ_m_sku}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{m2_endpoint_api}}/configurable-products/:sku/child",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"configurable-products",
										":sku",
										"child"
									],
									"variable": [
										{
											"key": "sku",
											"value": "{{created_prod_config_champ_sku}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ID to SKU",
					"item": [
						{
							"name": "M2: get product SKUs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has elements\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.products).to.be.a('array');",
											"    pm.expect(jsonData.products).to.be.lengthOf(3);",
											"",
											"    const child = jsonData.products.find(item => item.sku === pm.environment.get('created_prod_child_champ_m_sku'));",
											"    pm.expect(child).not.be.undefined;",
											"    pm.expect(child.parent_sku).to.eq(pm.environment.get('created_prod_config_champ_sku'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/products?ids[]={{gen_simple_product1_id}}&ids[]={{gen_config_child_product1_id}}&ids[]={{gen_config_parent_product1_id}}",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "ids[]",
											"value": "{{gen_simple_product1_id}}"
										},
										{
											"key": "ids[]",
											"value": "{{gen_config_child_product1_id}}"
										},
										{
											"key": "ids[]",
											"value": "{{gen_config_parent_product1_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2: get non-existing ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has elements\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.products).to.be.a('array');",
											"    pm.expect(jsonData.products).to.be.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/products?ids[]={{gen_simple_product1_id}}&ids[]=99999",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "ids[]",
											"value": "{{gen_simple_product1_id}}"
										},
										{
											"key": "ids[]",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: read log",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has log\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.log).to.not.be.undefined;",
											"    jsonData.log.pop(); // empty line skip",
											"    const lastLine = jsonData.log.pop();",
											"    pm.expect(lastLine).to.contain('Could not find products by IDs: 99999');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/log?page=1&lines=2",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"log"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "lines",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2: get product SKUs (customer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has elements\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.products).to.be.a('array');",
											"    pm.expect(jsonData.products).to.be.lengthOf(3);",
											"",
											"    const child = jsonData.products.find(item => item.sku === pm.environment.get('created_prod_child_champ_m_sku'));",
											"    pm.expect(child).not.be.undefined;",
											"    pm.expect(child.parent_sku).to.eq(pm.environment.get('created_prod_config_champ_sku'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_customerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/products?ids[]={{gen_simple_product1_id}}&ids[]={{gen_config_child_product1_id}}&ids[]={{gen_config_parent_product1_id}}",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "ids[]",
											"value": "{{gen_simple_product1_id}}"
										},
										{
											"key": "ids[]",
											"value": "{{gen_config_child_product1_id}}"
										},
										{
											"key": "ids[]",
											"value": "{{gen_config_parent_product1_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SKU to ID",
					"item": [
						{
							"name": "M2: get product IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has elements\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.products).to.be.a('array');",
											"    pm.expect(jsonData.products).to.be.lengthOf(3);",
											"",
											"    const child = jsonData.products.find(item => item.id === String(pm.environment.get('gen_config_child_product1_id')));",
											"    pm.expect(child).not.be.undefined;",
											"    pm.expect(child.parent_sku).to.eq(pm.environment.get('created_prod_config_champ_sku'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/productsBySku?skus[]={{gen_simple_product1_sku}}&skus[]={{created_prod_child_champ_m_sku}}&skus[]={{created_prod_config_champ_sku}}",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"productsBySku"
									],
									"query": [
										{
											"key": "skus[]",
											"value": "{{gen_simple_product1_sku}}"
										},
										{
											"key": "skus[]",
											"value": "{{created_prod_child_champ_m_sku}}"
										},
										{
											"key": "skus[]",
											"value": "{{created_prod_config_champ_sku}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2: get non-existing SKU",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has elements\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.products).to.be.a('array');",
											"    pm.expect(jsonData.products).to.be.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/productsBySku?skus[]={{gen_simple_product1_sku}}&skus[]=NO-SKU",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"productsBySku"
									],
									"query": [
										{
											"key": "skus[]",
											"value": "{{gen_simple_product1_sku}}"
										},
										{
											"key": "skus[]",
											"value": "NO-SKU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: read log",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has log\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.log).to.not.be.undefined;",
											"    jsonData.log.pop(); // empty line skip",
											"    const lastLine = jsonData.log.pop();",
											"    pm.expect(lastLine).to.contain('Could not find products by SKUs: NO-SKU');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/log?page=1&lines=2",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"log"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "lines",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2: get product SKUs (customer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has elements\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.products).to.be.a('array');",
											"    pm.expect(jsonData.products).to.be.lengthOf(3);",
											"",
											"    const child = jsonData.products.find(item => item.id === String(pm.environment.get('gen_config_child_product1_id')));",
											"    pm.expect(child).not.be.undefined;",
											"    pm.expect(child.parent_sku).to.eq(pm.environment.get('created_prod_config_champ_sku'));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_customerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/productsBySku?skus[]={{gen_simple_product1_sku}}&skus[]={{created_prod_child_champ_m_sku}}&skus[]={{created_prod_config_champ_sku}}",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"productsBySku"
									],
									"query": [
										{
											"key": "skus[]",
											"value": "{{gen_simple_product1_sku}}"
										},
										{
											"key": "skus[]",
											"value": "{{created_prod_child_champ_m_sku}}"
										},
										{
											"key": "skus[]",
											"value": "{{created_prod_config_champ_sku}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2: get product Bundle configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has element\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.products).to.be.a('array');",
											"    pm.expect(jsonData.products).to.be.lengthOf(1);",
											"",
											"    const bundle = jsonData.products.find(item => item.sku === \"24-WG080\");",
											"    pm.expect(bundle).not.be.undefined;",
											"    pm.expect(bundle.selected_options).not.be.undefined;",
											"});",
											"",
											"pm.test(\"Has Bundle expected config\", function () {",
											"    var jsonData = pm.response.json();",
											"    const bundle = jsonData.products.find(item => item.sku === \"24-WG080\");",
											"    ",
											"    const selectedOptions = JSON.parse(bundle.selected_options);",
											"    pm.expect(selectedOptions).to.be.a('array');",
											"    pm.expect(selectedOptions).to.be.lengthOf(9);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_customerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/productsBySku?skus[]=24-WG080",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"productsBySku"
									],
									"query": [
										{
											"key": "skus[]",
											"value": "24-WG080"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "M2: del parent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{m2_endpoint_api}}/products/:sku",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"products",
										":sku"
									],
									"variable": [
										{
											"key": "sku",
											"value": "{{created_prod_config_champ_sku}}"
										}
									]
								},
								"description": "Enable an customer or guest user to create an empty cart and quote for an anonymous customer."
							},
							"response": []
						},
						{
							"name": "M2: del child M",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{m2_endpoint_api}}/products/:sku",
									"host": [
										"{{m2_endpoint_api}}"
									],
									"path": [
										"products",
										":sku"
									],
									"variable": [
										{
											"key": "sku",
											"value": "{{created_prod_child_champ_m_sku}}"
										}
									]
								},
								"description": "Enable an customer or guest user to create an empty cart and quote for an anonymous customer."
							},
							"response": []
						}
					],
					"description": "Cleanup routines to delete created data"
				}
			],
			"description": "Tests custom endpoint converting ID's to SKU's"
		},
		{
			"name": "Errors",
			"item": [
				{
					"name": "Bad Cart ID",
					"item": [
						{
							"name": "M2: Guest Token API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.token).to.be.a('string')",
											"    pm.environment.set(\"gen_bad_guest_sgToken\", jsonData.token);",
											"    pm.expect(jsonData.expiration).to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/:cartId/token",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										":cartId",
										"token"
									],
									"variable": [
										{
											"key": "cartId",
											"value": "11111111111111111111111111111111"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "FE: bad masked cart id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Load the HTML response to $",
											"const pkg = require('cheerio')",
											"const $ = pkg.load(pm.response.text());",
											"",
											"pm.test(\"Check redirected to app close event\", function () {",
											"    const input = $('body.sgwebcheckout-close-index');",
											"    pm.expect(input).to.be.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token={{gen_bad_guest_sgToken}}",
									"host": [
										"{{m2_endpoint_fe_sgwebc}}"
									],
									"path": [
										"account",
										"login"
									],
									"query": [
										{
											"key": "redirectTo",
											"value": "registered",
											"disabled": true
										},
										{
											"key": "token",
											"value": "{{gen_bad_guest_sgToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "M2A: read log",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has log\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.log).to.not.be.undefined;",
											"    jsonData.log.pop(); // empty line skip",
											"    const lastLine = jsonData.log.pop();",
											"    pm.expect(lastLine).to.contain('Could not locate masked quote ID');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{gen_adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{m2_endpoint_api_sgwebc}}/log?page=1&lines=5",
									"host": [
										"{{m2_endpoint_api_sgwebc}}"
									],
									"path": [
										"log"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "lines",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "M2: get bad SKU/ID map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/products",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "FE: expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the HTML response to $",
									"const pkg = require('cheerio')",
									"const $ = pkg.load(pm.response.text());",
									"",
									"pm.test(\"Check redirected to app close event\", function () {",
									"    const input = $('body.sgwebcheckout-close-index');",
									"    pm.expect(input).to.be.lengthOf(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "PostmanRuntime Mozilla/5.0 (iPhone; CPU iPhone OS 17_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 libshopgate/25.0 (RN Engage 11.0.0-beta.5 Codebase:11.0.0-beta.5) Mozilla/5.0 (Linux; Android 12; Nokia 5.3 Build/SKQ1.211230.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/121.0.6167.143 Mobile Safari/537.36 libshopgate/25.0 (Jagdwelt 24 11.0.2 Codebase:11.0.2)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_fe_sgwebc}}/account/login?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjE2ODU2NDYsImlzcyI6IjE5Mi4xNjguMi4xMzUiLCJpYXQiOjE3MjE2ODU1ODYsImNhcnRfaWQiOiIxcGxobm1sS216OVhKUUlyU2dKMmNXYVk3Ym1QY28zaSJ9.FhrwDON4WAE-xLLEPkLzJJz73nOTt5BzYWTCot3j70k",
							"host": [
								"{{m2_endpoint_fe_sgwebc}}"
							],
							"path": [
								"account",
								"login"
							],
							"query": [
								{
									"key": "redirectTo",
									"value": "registered",
									"disabled": true
								},
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MjE2ODU2NDYsImlzcyI6IjE5Mi4xNjguMi4xMzUiLCJpYXQiOjE3MjE2ODU1ODYsImNhcnRfaWQiOiIxcGxobm1sS216OVhKUUlyU2dKMmNXYVk3Ym1QY28zaSJ9.FhrwDON4WAE-xLLEPkLzJJz73nOTt5BzYWTCot3j70k"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "M2A: read log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has log\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.log).to.not.be.undefined;",
									"    jsonData.log.pop(); // empty line skip",
									"    const lastLine = jsonData.log.pop();",
									"    pm.expect(lastLine).to.contain('Invalid token received');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/log?page=1&lines=5",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								"log"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "lines",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "M2: token w/o cartId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Has error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.a('string').to.contain('Invalid value');",
									"    pm.expect(jsonData.parameters.fieldName).to.eq('cartId');",
									"    pm.expect(jsonData.parameters.value).to.eq(':cartId');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/:cartId/token",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								":cartId",
								"token"
							],
							"variable": [
								{
									"key": "cartId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "M2A: log unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/log?page=1&lines=5",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								"log"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "lines",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check WebC order",
			"item": [
				{
					"name": "M2A: get orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.items).to.be.a('array').to.not.be.empty;",
									"    pm.expect(jsonData.total_count).to.be.greaterThan(0);",
									"",
									"    // check shipping assignments",
									"    const order = jsonData.items.pop();",
									"    pm.expect(order.extension_attributes).to.have.property('shipping_assignments').to.not.be.empty;",
									"    const shippingAssignment = order.extension_attributes.shipping_assignments.pop();",
									"    pm.expect(shippingAssignment).to.have.property('shipping').to.have.property('address')",
									"    const address = shippingAssignment.shipping.address;",
									"    pm.expect(address).to.have.property('region');",
									"    pm.expect(address).to.have.property('region_code');",
									"    pm.expect(address).to.have.property('city');",
									"    pm.expect(address).to.have.property('street');",
									"    pm.expect(address).to.have.property('postcode');",
									"    pm.expect(address).to.have.property('country_id');",
									"    pm.expect(address).to.have.property('telephone');",
									"",
									"    pm.expect(shippingAssignment.shipping.method).to.eq('flatrate_flatrate');",
									"    pm.expect(shippingAssignment.shipping.total).to.have.property('base_shipping_amount').to.eq(5);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{gen_adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{m2_endpoint_api_sgwebc}}/orders?searchCriteria[currentPage]=1&searchCriteria[pageSize]=10",
							"host": [
								"{{m2_endpoint_api_sgwebc}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "searchCriteria[currentPage]",
									"value": "1"
								},
								{
									"key": "searchCriteria[pageSize]",
									"value": "10"
								},
								{
									"key": "searchCriteria[filter_groups][0][filters][0][field]",
									"value": "increment_id",
									"disabled": true
								},
								{
									"key": "searchCriteria[filter_groups][0][filters][0][value]",
									"value": "000000051",
									"disabled": true
								},
								{
									"key": "searchCriteria[filter_groups][0][filters][0][condition_type]",
									"value": "eq",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "After Cypress tests create an order via Frontend we should have an order we can retrieve"
		}
	]
}