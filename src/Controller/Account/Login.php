<?php declare(strict_types=1);

namespace Shopgate\WebCheckout\Controller\Account;

use Magento\Checkout\Model\Session as CheckoutSession;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Customer\Model\Session as CustomerSession;
use Magento\Framework\App\Action\HttpGetActionInterface;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\App\ResponseInterface;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Controller\ResultInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\UrlInterface;
use Magento\Framework\View\Result\Page;
use Magento\Quote\Model\MaskedQuoteIdToQuoteIdInterface;
use Psr\Log\LoggerInterface;
use Shopgate\WebCheckout\Services\TokenManager;

class Login implements HttpGetActionInterface
{
    private ResultInterface $redirect;

    public function __construct(
        private readonly CustomerRepositoryInterface $customerRepository,
        private readonly RequestInterface $request,
        private readonly ResultFactory $resultFactory,
        private readonly TokenManager $tokenManager,
        private readonly CustomerSession $customerSession,
        private readonly CheckoutSession $checkoutSession,
        private readonly UrlInterface $urlInterface,
        private readonly MaskedQuoteIdToQuoteIdInterface $maskedQuoteToQuote,
        private readonly LoggerInterface $logger

    ) {
        $this->redirect = $this->resultFactory->create(ResultFactory::TYPE_REDIRECT);
    }

    /**
     * NB! Token data can be generated by Anonymous users, be careful
     */
    public function execute(): Page|ResultInterface|ResponseInterface
    {
        $closeInAppRoute = 'sgwebcheckout/close';
        // identifies "checkout" button registrations
        $isSGCheckout = $this->request->getParam('sgcloud_checkout', 0);

        $token = $this->request->getParam('token', '');
        if (!$this->tokenManager->validateToken($token)) {
            $this->logger->debug('Invalid token received');
            return $this->redirect->setPath($closeInAppRoute);
        }

        $customerId = $this->tokenManager->getCustomerId($token);
        $maskedQuoteId = $this->tokenManager->getCartId($token);
        // todo: move to service class that handles User stuff
        if ($customerId) {
            try {
                $this->loginCustomer($customerId);
            } catch (NoSuchEntityException|LocalizedException $e) {
                $this->logger->error("Couldn't log in customer by ID: '$customerId', Error: " . $e->getMessage());
                return $this->redirect->setPath($closeInAppRoute);
            }
        } elseif ($maskedQuoteId) {
            try {
                $this->logoutCustomer();
                $this->loginGuest($maskedQuoteId);
            } catch (NoSuchEntityException) {
                $this->logger->error("Could not locate masked quote ID: '$maskedQuoteId'");
                return $this->redirect->setPath($closeInAppRoute);
            }
        }

        return $this->redirect->setUrl($this->getRedirectUrl());
    }

    /**
     * @throws NoSuchEntityException
     * @throws LocalizedException
     */
    private function loginCustomer(int $customerId): void
    {
        $customer = $this->customerRepository->getById($customerId);
        $this->customerSession->setCustomerId($customerId);
        // this will prompt a cart load via `customer_login` observer
        $this->customerSession->setCustomerDataAsLoggedIn($customer);
    }

    /**
     * There could be cases where a customer is already logged in inApp,
     * but wants to register a second user account from the App
     */
    private function logoutCustomer(): void
    {
        $this->customerSession->isLoggedIn() && $this->customerSession->logout();
    }

    private function getRedirectUrl(): string
    {
        $redirectTo = $this->request->getParam('redirectTo', 'checkout/cart');
        $url = $this->urlInterface->getUrl($redirectTo);

        return $this->urlInterface->getRedirectUrl($url);
    }

    /**
     * @throws NoSuchEntityException
     */
    private function loginGuest(string $maskedQuoteId): void
    {
        $quoteId = $this->maskedQuoteToQuote->execute($maskedQuoteId);
        $this->checkoutSession->setQuoteId($quoteId);
    }
}
