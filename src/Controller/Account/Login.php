<?php declare(strict_types=1);

namespace Shopgate\WebCheckout\Controller\Account;

use Magento\Framework\App\Action\HttpGetActionInterface;
use Magento\Framework\App\RequestInterface;
use Magento\Framework\App\ResponseInterface;
use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Controller\ResultInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\UrlInterface;
use Magento\Framework\View\Result\Page;
use Psr\Log\LoggerInterface;
use Shopgate\WebCheckout\Api\ShopgateCookieManagementInterface;
use Shopgate\WebCheckout\Services\TokenManager;
use Shopgate\WebCheckout\Services\UserAccess;

class Login implements HttpGetActionInterface
{
    private ResultInterface $redirect;

    public function __construct(
        private readonly UserAccess $userAccess,
        private readonly RequestInterface $request,
        private readonly ResultFactory $resultFactory,
        private readonly TokenManager $tokenManager,
        private readonly UrlInterface $urlInterface,
        private readonly LoggerInterface $logger
    ) {
        $this->redirect = $this->resultFactory->create(ResultFactory::TYPE_REDIRECT);
    }

    /**
     * NB! Token data can be generated by Anonymous users, be careful
     *
     * @return Page|ResultInterface|ResponseInterface
     */
    public function execute()
    {
        $closeInAppRoute = 'sgwebcheckout/close';
        $token = $this->request->getParam('token', '');

        if (!$this->tokenManager->validateToken($token)) {
            $this->logger->debug('Invalid token received');
            return $this->redirect->setUrl($this->getRedirectUrl($closeInAppRoute));
        }

        if ($customerId = $this->tokenManager->getCustomerId($token)) {
            try {
                $this->userAccess->loginCustomer($customerId);
            } catch (NoSuchEntityException|LocalizedException $e) {
                $this->logger->error("Couldn't log in customer by ID: '$customerId', Error: " . $e->getMessage());
                return $this->redirect->setUrl($this->getRedirectUrl($closeInAppRoute));
            }
        } elseif ($maskedQuoteId = $this->tokenManager->getCartId($token)) {
            try {
                $this->userAccess->logoutCustomer();
                $this->userAccess->loginGuest($maskedQuoteId);
            } catch (NoSuchEntityException) {
                $this->logger->error("Could not locate masked quote ID: '$maskedQuoteId'");
                return $this->redirect->setUrl($this->getRedirectUrl($closeInAppRoute));
            }
        } else {
            $this->logger->error('Neither guest cartId or customer authToken provided');
            return $this->redirect->setUrl($this->getRedirectUrl($closeInAppRoute));
        }

        return $this->redirect->setUrl($this->getRedirectUrl());
    }

    /**
     * We need to forward the sgWebView GET param for developer mode checks
     */
    private function getRedirectUrl(string $redirectPath = null): string
    {
        $isWebView = $this->request->getParam(ShopgateCookieManagementInterface::COOKIE_NAME);
        $params = $isWebView === null ? null : [ShopgateCookieManagementInterface::COOKIE_NAME => $isWebView];

        $redirectTo = $redirectPath ?: $this->request->getParam('redirectTo', 'checkout');
        $url = $this->urlInterface->getUrl($redirectTo, $params);

        return $this->urlInterface->getRedirectUrl($url);
    }
}
